{"version":3,"sources":["AfterpayCheckout.tsx"],"names":["ORDER_TOKEN","AfterpayCheckout","React","memo","props","webViewRef","useRef","loading","activityIndicatorProps","handleShouldStartLoadWithRequest","event","url","includes","tokenIndex","indexOf","onSuccess","substring","length","onFailure","onCancel","uri","style"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;AAWA,MAAMA,WAAW,GAAG,aAApB;;AAEA,MAAMC,gBAAgB,gBAAGC,eAAMC,IAAN,CAAYC,KAAD,IAAkC;AACpE,QAAMC,UAAU,GAAGH,eAAMI,MAAN,CAAsB,IAAtB,CAAnB;;AACA,QAAMC,OAAO,GAAG,mBAAM,6BAAC,8BAAD,EAAuBH,KAAK,CAACI,sBAA7B,CAAtB;;AACA,QAAMC,gCAAgC,GACpCC,KADuC,IAE3B;AACZ,UAAM;AAAEC,MAAAA;AAAF,QAAUD,KAAhB;;AACA,QAAIC,GAAG,CAACC,QAAJ,CAAa,gBAAb,CAAJ,EAAoC;AAClC,YAAMC,UAAU,GAAGF,GAAG,CAACG,OAAJ,CAAYd,WAAZ,CAAnB;AACAI,MAAAA,KAAK,CAACW,SAAN,CACEJ,GAAG,CAACK,SAAJ,CAAcH,UAAU,GAAGb,WAAW,CAACiB,MAAvC,EAA+CN,GAAG,CAACM,MAAnD,CADF;AAGA,aAAO,KAAP;AACD,KAND,MAMO,IAAIN,GAAG,CAACC,QAAJ,CAAa,gBAAb,CAAJ,EAAoC;AACzCR,MAAAA,KAAK,CAACc,SAAN,CAAgB,8BAAhB;AACA,aAAO,KAAP;AACD,KAHM,MAGA,IAAIP,GAAG,CAACC,QAAJ,CAAa,kBAAb,CAAJ,EAAsC;AAC3CR,MAAAA,KAAK,CAACe,QAAN;AACA,aAAO,KAAP;AACD,KAHM,MAGA;AACL,aAAO,IAAP;AACD;AACF,GAnBD;;AAqBA,sBACE,6BAAC,2BAAD;AACE,IAAA,MAAM,EAAE;AAAEC,MAAAA,GAAG,EAAEhB,KAAK,CAACO;AAAb,KADV;AAEE,IAAA,aAAa,EAAEJ,OAFjB;AAGE,IAAA,mBAAmB,EAAE,IAHvB;AAIE,IAAA,GAAG,EAAEF,UAJP;AAKE,IAAA,4BAA4B,EAAEI,gCALhC;AAME,IAAA,KAAK,EAAEL,KAAK,CAACiB;AANf,IADF;AAUD,CAlCwB,CAAzB;;eAoCepB,gB","sourcesContent":["import React from 'react';\nimport { StyleProp, ViewStyle, ActivityIndicator, ActivityIndicatorProps } from 'react-native';\nimport { WebView, WebViewNavigation } from 'react-native-webview';\n\ninterface AfterpayCheckoutProps {\n  url: string;\n  onSuccess: (data: string) => void;\n  onFailure: (data: string) => void;\n  onCancel: () => void;\n  style?: StyleProp<ViewStyle>;\n  activityIndicatorProps?: ActivityIndicatorProps\n}\n\nconst ORDER_TOKEN = 'orderToken=';\n\nconst AfterpayCheckout = React.memo((props: AfterpayCheckoutProps) => {\n  const webViewRef = React.useRef<WebView>(null);\n  const loading = () => <ActivityIndicator {...props.activityIndicatorProps} />;\n  const handleShouldStartLoadWithRequest = (\n    event: WebViewNavigation\n  ): boolean => {\n    const { url } = event;\n    if (url.includes('status=SUCCESS')) {\n      const tokenIndex = url.indexOf(ORDER_TOKEN);\n      props.onSuccess(\n        url.substring(tokenIndex + ORDER_TOKEN.length, url.length)\n      );\n      return false;\n    } else if (url.includes('status=FAILURE')) {\n      props.onFailure('Error: Card was not accepted');\n      return false;\n    } else if (url.includes('status=CANCELLED')) {\n      props.onCancel();\n      return false;\n    } else {\n      return true;\n    }\n  };\n\n  return (\n    <WebView\n      source={{ uri: props.url }}\n      renderLoading={loading}\n      startInLoadingState={true}\n      ref={webViewRef}\n      onShouldStartLoadWithRequest={handleShouldStartLoadWithRequest}\n      style={props.style}\n    />\n  );\n});\n\nexport default AfterpayCheckout;\n"]}